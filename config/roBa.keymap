#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 7>;
            hold-trigger-on-release;
        };

        encoder_mouse: encoder_mouse {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MOUSE";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
        };

        encoder: encoder {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENCODER";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Mod-DH {
            bindings = <
&kp Q         &kp W              &kp F              &kp P            &kp B                                       &kp J      &kp L             &kp U             &kp Y               &kp SEMICOLON
&hml LCTRL A  &hml LEFT_SHIFT R  &hml LEFT_ALT S    &hml LEFT_WIN T  &kp G    &mkp MCLK       &kp DOUBLE_QUOTES  &kp M      &hmr RIGHT_WIN N  &hmr RIGHT_ALT E  &hmr RIGHT_SHIFT I  &hmr RCTRL O
&kp Z         &kp X              &kp C              &kp D            &kp V    &kp DELETE      &kp BACKSPACE      &kp K      &kp H             &kp COMMA         &kp DOT             &kp SLASH
&kp ESCAPE    &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &to 1            &kp TAB  &to 2           &kp ENTER          &kp SPACE                                                          &kp BACKSLASH
            >;

            sensor-bindings = <&encoder_mouse>;
        };

        Numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &trans  &trans  &trans   &trans   &trans
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &mkp MCLK      &trans  &kp N6  &kp N7  &kp N8   &kp N9   &kp N0
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6         &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&to 0   &trans  &trans  &to 0   &trans  &to 2          &trans  &trans                            &trans
            >;

            sensor-bindings = <&encoder SCRL_UP SCRL_DOWN>;
        };

        Navigation {
            bindings = <
&trans          &kp HOME  &kp UP    &kp END    &kp PG_UP                                 &trans          &trans     &trans     &trans  &trans
&kp LEFT_SHIFT  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &mkp MCLK      &trans          &trans          &mkp LCLK  &mkp RCLK  &trans  &trans
&kp LCTRL       &trans    &trans    &trans     &trans     &trans         &trans          &trans          &trans     &trans     &trans  &trans
&to 0           &trans    &trans    &to 1      &trans     &to 0          &msc SCRL_DOWN  &msc SCRL_DOWN                                &trans
            >;

            sensor-bindings = <&inc_dec_kp A B>;
        };

        Rus {
            bindings = <
&kp Q    &kp W   &kp E   &kp R   &kp T                        &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A    &kp S   &kp D   &kp F   &kp G   &trans      &trans   &kp H      &kp J  &kp K      &kp L    &kp SEMI
&kp Z    &kp X   &kp C   &kp V   &kp B   &trans      &trans   &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH
&kp ESC  &trans  &trans  &trans  &trans  &trans      &kp RET  &kp SPACE                             &trans
            >;
        };
    };
};
